generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuarios {
  id_usuario              Int                       @id @default(autoincrement())
  nome                    String                    @db.VarChar(100)
  email                   String                    @unique @db.VarChar(100)
  senha_hash              String                    @db.VarChar(255)
  tipo_usuario            usuarios_tipo_usuario
  ativo                   Boolean                   @default(true)
  data_criacao            DateTime                  @default(now())
  ultimo_acesso           DateTime?

  assistidos              assistidos[]              @relation("UsuarioAssistido")
  categorias              categorias[]              @relation("UsuarioCategoria")
  perguntas               perguntas[]               @relation("UsuarioPergunta")
  respostas               respostas[]               @relation("UsuarioResposta")
  historico_respostas     historico_respostas[]     @relation("UsuarioHistorico")

  @@index([email])
  @@index([tipo_usuario])
}

model assistidos {
  id_assistido            Int                       @id @default(autoincrement())
  nome                    String                    @db.VarChar(100)
  cpf                     String?                   @unique @db.VarChar(14)
  rg                      String?                   @db.VarChar(20)
  data_nascimento         DateTime?                 @db.Date
  sexo                    assistidos_sexo?
  estado_civil            String?                   @db.VarChar(20)
  telefone                String?                   @db.VarChar(15)
  email                   String?                   @db.VarChar(100)
  endereco_completo       String?                   @db.Text
  cep                     String?                   @db.VarChar(9)
  cidade                  String?                   @db.VarChar(50)
  estado                  String?                   @db.VarChar(2)
  nome_responsavel        String?                   @db.VarChar(100)
  cpf_responsavel         String?                   @db.VarChar(14)
  parentesco_responsavel  String?                   @db.VarChar(30)
  telefone_responsavel    String?                   @db.VarChar(15)
  data_cadastro           DateTime                  @default(now())
  status_ativo            Boolean                   @default(true)
  observacoes_gerais      String?                   @db.Text
  cadastrado_por          Int?

  usuario                 usuarios?                 @relation("UsuarioAssistido", fields: [cadastrado_por], references: [id_usuario], onDelete: SetNull)
  respostas               respostas[]               @relation("AssistidoResposta")

  @@index([cpf])
  @@index([nome])
  @@index([status_ativo])
  @@index([data_cadastro])
}

model categorias {
  id_categoria            Int                       @id @default(autoincrement())
  nome_categoria          String                    @db.VarChar(100)
  descricao               String?                   @db.Text
  ordem_exibicao          Int                       @default(0)
  ativa                   Boolean                   @default(true)
  data_criacao            DateTime                  @default(now())
  criada_por              Int?

  usuario                 usuarios?                 @relation("UsuarioCategoria", fields: [criada_por], references: [id_usuario], onDelete: SetNull)
  perguntas               perguntas[]               @relation("CategoriaPergunta")

  @@index([ordem_exibicao])
  @@index([ativa])
}

model perguntas {
  id_pergunta             Int                       @id @default(autoincrement())
  id_categoria            Int
  texto_pergunta          String                    @db.Text
  tipo_resposta           perguntas_tipo_resposta
  opcoes_resposta         Json?
  obrigatoria             Boolean                   @default(false)
  ordem_categoria         Int                       @default(0)
  ativa                   Boolean                   @default(true)
  data_criacao            DateTime                  @default(now())
  criada_por              Int?

  categoria               categorias                @relation("CategoriaPergunta", fields: [id_categoria], references: [id_categoria], onDelete: Cascade)
  usuario                 usuarios?                 @relation("UsuarioPergunta", fields: [criada_por], references: [id_usuario], onDelete: SetNull)
  permissoes_pergunta     permissoes_pergunta[]     @relation("PerguntaPermissao")
  respostas               respostas[]               @relation("PerguntaResposta")

  @@index([id_categoria])
  @@index([tipo_resposta])
  @@index([ordem_categoria])
  @@index([ativa])
}

model permissoes_pergunta {
  id_permissao            Int                       @id @default(autoincrement())
  id_pergunta             Int
  tipo_usuario            permissoes_pergunta_tipo_usuario
  pode_visualizar         Boolean                   @default(true)
  pode_editar             Boolean                   @default(false)
  pode_responder          Boolean                   @default(false)

  pergunta                perguntas                 @relation("PerguntaPermissao", fields: [id_pergunta], references: [id_pergunta], onDelete: Cascade)

  @@unique([id_pergunta, tipo_usuario], map: "uk_pergunta_tipo")
  @@index([id_pergunta, tipo_usuario])
}

model respostas {
  id_resposta             Int                       @id @default(autoincrement())
  id_assistido            Int
  id_pergunta             Int
  resposta_texto          String?                   @db.Text
  resposta_numero         Decimal?                  @db.Decimal(15, 4)
  resposta_data           DateTime?                 @db.Date
  resposta_boolean        Boolean?
  nome_arquivo            String?                   @db.VarChar(255)
  caminho_arquivo         String?                   @db.VarChar(500)
  data_resposta           DateTime                  @default(now())
  data_atualizacao        DateTime                  @default(now()) @updatedAt
  respondida_por          Int?
  versao                  Int                       @default(1)

  assistido               assistidos                @relation("AssistidoResposta", fields: [id_assistido], references: [id_assistido], onDelete: Cascade)
  pergunta                perguntas                 @relation("PerguntaResposta", fields: [id_pergunta], references: [id_pergunta], onDelete: Cascade)
  usuario                 usuarios?                 @relation("UsuarioResposta", fields: [respondida_por], references: [id_usuario], onDelete: SetNull)
  historico_respostas     historico_respostas[]     @relation("RespostaHistorico")

  @@unique([id_assistido, id_pergunta, versao], map: "uk_assistido_pergunta_versao")
  @@index([id_assistido, id_pergunta])
  @@index([data_resposta])
  @@index([respondida_por])
}

model historico_respostas {
  id_historico                Int                   @id @default(autoincrement())
  id_resposta                 Int
  resposta_anterior_texto     String?               @db.Text
  resposta_anterior_numero    Decimal?              @db.Decimal(15, 4)
  resposta_anterior_data      DateTime?             @db.Date
  resposta_anterior_boolean   Boolean?
  nome_arquivo_anterior       String?               @db.VarChar(255)
  data_alteracao              DateTime              @default(now())
  alterada_por                Int?
  motivo_alteracao            String?               @db.Text

  resposta                    respostas             @relation("RespostaHistorico", fields: [id_resposta], references: [id_resposta], onDelete: Cascade)
  usuario                     usuarios?             @relation("UsuarioHistorico", fields: [alterada_por], references: [id_usuario], onDelete: SetNull)

  @@index([id_resposta])
  @@index([data_alteracao])
}

enum usuarios_tipo_usuario {
  psicologa
  secretaria
  assistente
}

enum assistidos_sexo {
  M
  F
  Outro
}

enum perguntas_tipo_resposta {
  texto
  numero
  data
  opcao_unica
  multipla_escolha
  boolean
  arquivo
}

enum permissoes_pergunta_tipo_usuario {
  psicologa
  secretaria
  assistente
}